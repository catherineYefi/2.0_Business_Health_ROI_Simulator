import gradio as gr
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import time
import uuid
import random

# ü§ñ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ò-–°–ò–°–¢–ï–ú–ê –ü–û–î–°–ö–ê–ó–û–ö –ò –ê–ù–ê–õ–ò–ó–ê
class UltimaAIBusinessAdvisor:
    def __init__(self):
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ò–ò —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏
        self.insights_database = {
            'revenue_insights': {
                'critical_low': "üö® –ö–†–ò–¢–ò–ß–ù–û! –í—ã—Ä—É—á–∫–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è. –ë–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ä - –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —á–µ—Ä–µ–∑ 3-6 –º–µ—Å.",
                'low': "üí° –í—ã—Ä—É—á–∫–∞ –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. –§–æ–∫—É—Å –Ω–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1.",
                'below_average': "üìä –ß—É—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Ä—ã–Ω–∫—É. –ï—Å—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –Ω–∞ 30-40%.",
                'average': "üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –û—Ç–ª–∏—á–Ω–∞—è –±–∞–∑–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã.",
                'above_average': "üöÄ –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ! –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –¥—É–º–∞—Ç—å –æ —Ñ—Ä–∞–Ω—à–∏–∑–µ/–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                'high': "üí∞ –¢–æ–ø-20% —Ä—ã–Ω–∫–∞! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, IPO –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞.",
                'unicorn': "ü¶Ñ –ï–î–ò–ù–û–†–û–ì! –í—ã –≤ —Ç–æ–ø-1% –æ—Ç—Ä–∞—Å–ª–∏. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            },
            'margin_insights': {
                'loss': "üíÄ –£–ë–´–¢–û–ß–ù–û–°–¢–¨! –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–±—ã—Ç–æ–∫. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –º–æ–¥–µ–ª—å.",
                'critical': "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ - –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏. –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—Ç—Ä–∞—Ç.",
                'low': "üò∞ –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ —Ç–æ—Ä–º–æ–∑–∏—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—Ç—Ä–∞—Ç.",
                'below_average': "üìâ –ù–∏–∂–µ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞. –ï—Å—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ 15-25%.",
                'average': "üìä –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ –¥–ª—è —Ä–æ—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
                'good': "‚úÖ –•–æ—Ä–æ—à–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å! –ú–æ–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç.",
                'excellent': "üèÜ –û—Ç–ª–∏—á–Ω–∞—è –º–∞—Ä–∂–∞! –õ–∏–¥–µ—Ä –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –≤—Ä–µ–º—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                'premium': "üíé –ü–†–ï–ú–ò–£–ú-–º–∞—Ä–∂–∞! –£ –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
            },
            'team_insights': {
                'solo': "üë§ –°–æ–ª–æ-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å - –≤—Å–µ —Ä–∏—Å–∫–∏ –Ω–∞ –≤–∞—Å. –ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∞—á–∞—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å.",
                'micro': "üë• –ú–∏–∫—Ä–æ-–∫–æ–º–∞–Ω–¥–∞. –û—Ç–ª–∏—á–Ω–æ –¥–ª—è MVP, –Ω–æ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–∞–π–º—É –∫–ª—é—á–µ–≤—ã—Ö —Ä–æ–ª–µ–π.",
                'small': "üéØ –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Ö–æ—Ä–æ—à–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞. –°–∏—Å—Ç–µ–º—ã HR —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏.",
                'medium': "üëî –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞. –í—Ä–µ–º—è –≤–Ω–µ–¥—Ä—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ KPI –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
                'large': "üè¢ –ë–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ —á–µ—Ç–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.",
                'enterprise': "üèõÔ∏è –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –ù—É–∂–Ω—ã –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º—ã."
            }
        }
        
        # –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        self.smart_problem_hints = {
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': {
                1: {
                    'message': "üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã!",
                    'questions': ["–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–∞—é—Ç –ª—É—á—à–∏–π ROMI?", "–ö–∞–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏?"],
                    'next_steps': "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã"
                },
                5: {
                    'message': "üìä –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –µ—Å—Ç—å, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–¥–≤–æ–∏—Ç—å",
                    'questions': ["–ó–Ω–∞–µ—Ç–µ –ª–∏ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º?", "–ö–∞–∫–æ–π % –º–∞—Ä–∫–µ—Ç–∏–Ω–≥-–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤?"],
                    'next_steps': "–í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∫–≤–æ–∑–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                },
                8: {
                    'message': "üî• –ö—Ä–∏—Ç–∏—á–Ω–æ! –õ–∏–±–æ –¥–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–∏–¥–æ–≤, –ª–∏–±–æ –∏—Ö –º–∞–ª–æ",
                    'questions': ["–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?", "–ö–∞–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –æ—Ç –ª–∏–¥–∞ –≤ –∫–ª–∏–µ–Ω—Ç–∞?"],
                    'next_steps': "–°–†–û–ß–ù–û: –∞—É–¥–∏—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö, —Ñ–æ–∫—É—Å –Ω–∞ 1-2 –ª—É—á—à–∏—Ö"
                },
                10: {
                    'message': "üí• –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω - —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1!",
                    'questions': ["–ï—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–∏—Å—Ç–µ–º–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?", "–ö—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥?"],
                    'next_steps': "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ: –Ω–∞–π–º –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã"
                }
            },
            '–ü—Ä–æ–¥–∞–∂–∏': {
                1: {
                    'message': "üí∞ –ü—Ä–æ–¥–∞–∂–∏ –Ω–∞ –≤—ã—Å–æ—á–∞–π—à–µ–º —É—Ä–æ–≤–Ω–µ! –û—Ç–¥–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –º–∞—à–∏–Ω–∞ –¥–µ–Ω–µ–≥",
                    'questions': ["–ö–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏?", "–ì–æ—Ç–æ–≤—ã –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã?"],
                    'next_steps': "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ü–µ–Ω—Ç—Ä—ã –ø—Ä–æ–¥–∞–∂, –æ–±—É—á–∞–π—Ç–µ –Ω–æ–≤–∏—á–∫–æ–≤ –ø–æ –ª—É—á—à–∏–º —Å–∫—Ä–∏–ø—Ç–∞–º"
                },
                5: {
                    'message': "üìû –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –í–∏–¥–∏–º–æ, –Ω—É–∂–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å –∫–æ–º–∞–Ω–¥—É",
                    'questions': ["–ï—Å—Ç—å –ª–∏ —á–µ—Ç–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂?", "–ö–∞–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∑–≤–æ–Ω–∫–æ–≤ –≤ —Å–¥–µ–ª–∫–∏?"],
                    'next_steps': "–¢—Ä–µ–Ω–∏–Ω–≥–∏, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã, –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ CRM —Å –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂"
                },
                8: {
                    'message': "üò∞ –¢–µ—Ä—è–µ—Ç–µ –º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –∏–ª–∏ CRM?",
                    'questions': ["–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ —Ç–µ—Ä—è—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—ã?", "–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º?"],
                    'next_steps': "–ê—É–¥–∏—Ç –≤—Å–µ–π –≤–æ—Ä–æ–Ω–∫–∏, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã, –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤"
                },
                10: {
                    'message': "üö® –ü—Ä–æ–¥–∞–∂–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç —É–±–∏—Ç—å –±–∏–∑–Ω–µ—Å!",
                    'questions': ["–í–æ–æ–±—â–µ –µ—Å—Ç—å –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂?", "–°–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –º–µ—Å—è—Ü?"],
                    'next_steps': "–≠–ö–°–¢–†–ï–ù–ù–û: –Ω–∞–π–º –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–¥–∞–∂, –±–∞–∑–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã, CRM"
                }
            },
            '–ü—Ä–æ–¥—É–∫—Ç': {
                1: {
                    'message': "üé® –ü—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! –ö–ª–∏–µ–Ω—Ç—ã –≤ –ø–æ–ª–Ω–æ–º –≤–æ—Å—Ç–æ—Ä–≥–µ",
                    'questions': ["–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ product-market fit?", "–ö–∞–∫–∏–µ —Ñ–∏—á–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?"],
                    'next_steps': "–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ retention, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Ñ–∏–¥–±–µ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏—á"
                },
                5: {
                    'message': "ü§î –ü—Ä–æ–¥—É–∫—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ",
                    'questions': ["–ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã –∫–ª–∏–µ–Ω—Ç–æ–≤?", "–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ?"],
                    'next_steps': "–ì–ª—É–±–æ–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø–æ –±–æ–ª—è–º"
                },
                8: {
                    'message': "üòï –ü—Ä–æ–¥—É–∫—Ç —Å–ª–∞–±—ã–π, –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã. –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç",
                    'questions': ["–†–µ—à–∞–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É?", "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤?"],
                    'next_steps': "Product Discovery: –∏–∑—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –ø–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∏—á–∏"
                },
                10: {
                    'message': "üíî –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤. –ö—Ä–∏—Ç–∏—á–Ω–æ!",
                    'questions': ["–ü–æ–Ω—è—Ç–Ω–∞ –ª–∏ –≤–æ–æ–±—â–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞?", "–ï—Å—Ç—å –ª–∏ product-market fit?"],
                    'next_steps': "PIVOT: –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"
                }
            },
            '–û–ø–µ—Ä–∞—Ü–∏–∏': {
                1: {
                    'message': "‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–ª–∞–∂–µ–Ω—ã –∏–¥–µ–∞–ª—å–Ω–æ! –ë–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã",
                    'questions': ["–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Ä—É—Ç–∏–Ω—É?", "–ì–æ—Ç–æ–≤—ã –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é?"],
                    'next_steps': "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ñ—Ä–∞–Ω—à–∏–∑–µ"
                },
                5: {
                    'message': "üîÑ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—Å—Ç—å, –Ω–æ –º–Ω–æ–≥–æ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
                    'questions': ["–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ —Ä—É—Ç–∏–Ω—É?", "–ß—Ç–æ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º?"],
                    'next_steps': "–ê—É–¥–∏—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"
                },
                8: {
                    'message': "üòµ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞–æ—Å! –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–±–æ–∏ –∏ –ø–µ—Ä–µ–¥–µ–ª–∫–∏",
                    'questions': ["–ï—Å—Ç—å –ª–∏ —á–µ—Ç–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã?", "–ö—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?"],
                    'next_steps': "–°—Ä–æ—á–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã, –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö"
                },
                10: {
                    'message': "üí• –ü–æ–ª–Ω—ã–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–ª–ª–∞–ø—Å! –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    'questions': ["–ö–∞–∫ –≤–æ–æ–±—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–∫–∞–∑—ã?", "–°–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –≤ –¥–µ–Ω—å?"],
                    'next_steps': "–°–¢–û–ü-–æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –Ω—É–ª—è, –≤–Ω–µ–¥—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å"
                }
            },
            '–ö–æ–º–∞–Ω–¥–∞': {
                1: {
                    'message': "üëë –ö–æ–º–∞–Ω–¥–∞ –º–µ—á—Ç—ã! –í—Å–µ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã",
                    'questions': ["–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ —Ç–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å?", "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ?"],
                    'next_steps': "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É, –≥–æ—Ç–æ–≤—å—Ç–µ –ª–∏–¥–µ—Ä–æ–≤"
                },
                5: {
                    'message': "üë• –ö–æ–º–∞–Ω–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π",
                    'questions': ["–ß–µ—Ç–∫–∏–µ –ª–∏ —É –≤—Å–µ—Ö KPI?", "–ö–∞–∫ —á–∞—Å—Ç–æ –¥–∞–µ—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å?"],
                    'next_steps': "–í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ one-on-one –≤—Å—Ç—Ä–µ—á–∏"
                },
                8: {
                    'message': "üò§ –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π. –≠—Ç–æ —Ç–æ—Ä–º–æ–∑–∏—Ç –≤—Å–µ",
                    'questions': ["–¢–µ–∫—É—á–µ—Å—Ç—å –∫–∞–¥—Ä–æ–≤ –≤—ã—Å–æ–∫–∞—è?", "–í—Å–µ –ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤–∞—Å –≤–∏—Å—è—Ç?"],
                    'next_steps': "–°—Ä–æ—á–Ω–æ: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–µ—Ç–∫–∏–µ —Ä–æ–ª–∏, —Ä–∞–±–æ—Ç–∞ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π"
                },
                10: {
                    'message': "üî• HR-–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞! –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—ë –Ω–µ—Ç",
                    'questions': ["–ú–æ–∂–µ—Ç–µ –ª–∏ —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é?", "–ö—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –≤–∞—Å?"],
                    'next_steps': "–≠–ö–°–¢–†–ï–ù–ù–û: –Ω–∞–π–º –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è, –±–∞–∑–æ–≤–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–º–∞"
                }
            },
            '–§–∏–Ω–∞–Ω—Å—ã': {
                1: {
                    'message': "üíé –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏–¥–µ–∞–ª—å–Ω–∞! –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å",
                    'questions': ["–ö–∞–∫–∏–µ KPI –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", "–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫—ç—à-—Ñ–ª–æ—É?"],
                    'next_steps': "–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–∏–Ω–º–æ–¥–µ–ª–∏"
                },
                5: {
                    'message': "üìä –ë–∞–∑–æ–≤—ã–π —É—á–µ—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                    'questions': ["–ó–Ω–∞–µ—Ç–µ –ª–∏ Unit Economics?", "–ö–∞–∫ —á–∞—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ P&L?"],
                    'next_steps': "–í–Ω–µ–¥—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —É—á–µ—Ç, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"
                },
                8: {
                    'message': "üò∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ö–∞–æ—Å! –ù–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏",
                    'questions': ["–ó–Ω–∞–µ—Ç–µ –ª–∏ —Ç–æ—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞?", "–ü–æ–Ω—è—Ç–µ–Ω –ª–∏ –∫—ç—à-—Ñ–ª–æ—É?"],
                    'next_steps': "–°—Ä–æ—á–Ω–æ –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ —É—á–µ—Ç–µ, –≤–Ω–µ–¥—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
                },
                10: {
                    'message': "üíÄ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–ª–ª–∞–ø—Å! –ö–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –æ–±–∞–Ω–∫—Ä–æ—Ç–∏—Ç—å—Å—è",
                    'questions': ["–ó–Ω–∞–µ—Ç–µ –ª–∏ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ?", "–ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å—á–∏—Ç–∞–ª–∏ –ø—Ä–∏–±—ã–ª—å?"],
                    'next_steps': "–≠–ö–°–¢–†–ï–ù–ù–û: –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—É–¥–∏—Ç, –ø–ª–∞–Ω —Å–ø–∞—Å–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"
                }
            }
        }
        
        # –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        self.industry_benchmarks = {
            'SaaS/IT': {
                'revenue_ranges': {'critical': 200000, 'low': 500000, 'average': 2000000, 'high': 8000000, 'unicorn': 50000000},
                'avg_margin': 75, 'avg_conversion': 15, 'growth_rate': 120, 'team_efficiency': 250000,
                'typical_problems': ['–í—ã—Å–æ–∫–∏–π churn', '–î–æ–ª–≥–∏–π sales cycle', 'Product-market fit'],
                'success_factors': ['Viral –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', 'LTV/CAC ratio', 'Monthly recurring revenue']
            },
            'E-commerce': {
                'revenue_ranges': {'critical': 500000, 'low': 1000000, 'average': 5000000, 'high': 25000000, 'unicorn': 100000000},
                'avg_margin': 45, 'avg_conversion': 8, 'growth_rate': 80, 'team_efficiency': 180000,
                'typical_problems': ['–í—ã—Å–æ–∫–∏–π CAC', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –ø–æ —Ü–µ–Ω–µ'],
                'success_factors': ['Conversion rate', 'AOV —Ä–æ—Å—Ç', 'Repeat purchase rate']
            },
            '–£—Å–ª—É–≥–∏ B2B': {
                'revenue_ranges': {'critical': 150000, 'low': 300000, 'average': 1500000, 'high': 5000000, 'unicorn': 20000000},
                'avg_margin': 65, 'avg_conversion': 25, 'growth_rate': 60, 'team_efficiency': 200000,
                'typical_problems': ['–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è', '–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è', '–î–æ–ª–≥–∏–µ –ø—Ä–æ–¥–∞–∂–∏'],
                'success_factors': ['Repeat clients %', 'Referral rate', 'Project profitability']
            },
            'EdTech': {
                'revenue_ranges': {'critical': 300000, 'low': 800000, 'average': 3000000, 'high': 15000000, 'unicorn': 80000000},
                'avg_margin': 70, 'avg_conversion': 12, 'growth_rate': 100, 'team_efficiency': 220000,
                'typical_problems': ['Student acquisition cost', 'Completion rates', 'Content creation'],
                'success_factors': ['Course completion', 'Student satisfaction', 'Certification value']
            },
            '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥': {
                'revenue_ranges': {'critical': 200000, 'low': 400000, 'average': 1200000, 'high': 4000000, 'unicorn': 15000000},
                'avg_margin': 80, 'avg_conversion': 35, 'growth_rate': 40, 'team_efficiency': 300000,
                'typical_problems': ['–õ–∏—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é', '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–π–º–∞'],
                'success_factors': ['Hourly rate', 'Utilization rate', 'Client retention']
            }
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–±–ª–µ–º –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.problem_patterns = {
            'death_spiral': {
                'conditions': lambda problems: sum(1 for score in problems.values() if score >= 9) >= 3,
                'title': 'üíÄ –°–ü–ò–†–ê–õ–¨ –°–ú–ï–†–¢–ò',
                'message': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ë–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ä –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—ã–∂–∏–≤–µ—Ç',
                'priority': 1,
                'actions': ['–°—Ç–æ–ø –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã', '–§–æ–∫—É—Å –Ω–∞ –∫—ç—à-—Ñ–ª–æ—É', '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–∏–∑–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤']
            },
            'founder_bottleneck': {
                'conditions': lambda problems: problems.get('–ö–æ–º–∞–Ω–¥–∞', 0) >= 8 and problems.get('–û–ø–µ—Ä–∞—Ü–∏–∏', 0) >= 7,
                'title': 'üçæ –£–ó–ö–û–ï –ì–û–†–õ–´–®–ö–û –û–°–ù–û–í–ê–¢–ï–õ–Ø',
                'message': '–í—ã —Å—Ç–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–µ–º —Ä–æ—Å—Ç–∞. –í—Å–µ —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ –≤–∞—Å',
                'priority': 1,
                'actions': ['–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ù–∞–π–º –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤']
            },
            'broken_funnel': {
                'conditions': lambda problems: problems.get('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 0) >= 7 and problems.get('–ü—Ä–æ–¥–∞–∂–∏', 0) >= 7,
                'title': 'üìâ –°–õ–û–ú–ê–ù–ù–ê–Ø –í–û–†–û–ù–ö–ê',
                'message': '–ö–ª–∞—Å—Å–∏–∫–∞: –º–∞–ª–æ –ª–∏–¥–æ–≤ + –ø–ª–æ—Ö–∏–µ –ø—Ä–æ–¥–∞–∂–∏ = –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞',
                'priority': 2,
                'actions': ['–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏ (–±—ã—Å—Ç—Ä–µ–µ)', '–ü–æ—Ç–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ï–¥–∏–Ω–∞—è CRM-—Å–∏—Å—Ç–µ–º–∞']
            },
            'product_crisis': {
                'conditions': lambda problems: problems.get('–ü—Ä–æ–¥—É–∫—Ç', 0) >= 8,
                'title': 'üéØ –ü–†–û–î–£–ö–¢–û–í–´–ô –ö–†–ò–ó–ò–°',
                'message': '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ - —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
                'priority': 1,
                'actions': ['Product Discovery –∑–∞–Ω–æ–≤–æ', '–ì–ª—É–±–æ–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', '–í–æ–∑–º–æ–∂–µ–Ω PIVOT']
            },
            'scaling_chaos': {
                'conditions': lambda problems: sum(1 for score in problems.values() if score >= 6) >= 4,
                'title': 'üå™Ô∏è –•–ê–û–° –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø',
                'message': '–†–æ—Å—Ç –µ—Å—Ç—å, –Ω–æ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è. –¢–∏–ø–∏—á–Ω–æ –¥–ª—è 5M+ –≤—ã—Ä—É—á–∫–∏',
                'priority': 2,
                'actions': ['–ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è']
            }
        }
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ —É–ª—É—á—à–µ–Ω–∏–π —Å –ò–ò-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        self.improvement_matrix = {
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': {
                'impact_revenue': 0.35, 'confidence': 0.88, 'timeline_months': 2,
                'description': '–ò–ò-–≤–æ—Ä–æ–Ω–∫–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —Å–∫–≤–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'quick_wins': ['–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–∫—Å–µ–ª–µ–π', 'A/B-—Ç–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–æ–≤', '–†–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥'],
                'long_term': ['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è']
            },
            '–ü—Ä–æ–¥–∞–∂–∏': {
                'impact_revenue': 0.42, 'confidence': 0.92, 'timeline_months': 1,
                'description': 'CRM, —Å–∫—Ä–∏–ø—Ç—ã, –æ–±—É—á–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è follow-up',
                'quick_wins': ['–°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂', 'CRM-–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–≤–æ–Ω–∫–æ–≤'],
                'long_term': ['Sales enablement', '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è']
            },
            '–ü—Ä–æ–¥—É–∫—Ç': {
                'impact_revenue': 0.28, 'confidence': 0.75, 'timeline_months': 4,
                'description': 'Product-market fit, UX/UI, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'quick_wins': ['–§–∏–¥–±–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–∫—Å—ã UX', '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Ü–µ–Ω'],
                'long_term': ['Product Discovery', '–ù–æ–≤—ã–µ —Ñ–∏—á–∏', 'Platform thinking']
            },
            '–û–ø–µ—Ä–∞—Ü–∏–∏': {
                'impact_revenue': 0.25, 'confidence': 0.95, 'timeline_months': 2,
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è',
                'quick_wins': ['–ë–∞–∑–æ–≤—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω—ã', '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞'],
                'long_term': ['ERP-—Å–∏—Å—Ç–µ–º—ã', '–†–æ–±–æ—Ç–∏–∑–∞—Ü–∏—è', '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']
            },
            '–ö–æ–º–∞–Ω–¥–∞': {
                'impact_revenue': 0.32, 'confidence': 0.82, 'timeline_months': 3,
                'description': '–ù–∞–π–º, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—É–ª—å—Ç—É—Ä–∞',
                'quick_wins': ['–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á', 'KPI –¥–ª—è –∫–æ–º–∞–Ω–¥—ã', 'Regular feedback'],
                'long_term': ['Talent pipeline', 'Leadership development', 'Performance culture']
            },
            '–§–∏–Ω–∞–Ω—Å—ã': {
                'impact_revenue': 0.18, 'confidence': 0.98, 'timeline_months': 1,
                'description': 'Unit Economics, –∫—ç—à-—Ñ–ª–æ—É, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å',
                'quick_wins': ['–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —É—á–µ—Ç', 'Cash flow –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'Unit Economics'],
                'long_term': ['Financial modeling', 'Investor readiness', 'Predictive finance']
            }
        }
        
    def get_revenue_level(self, revenue, industry):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤—ã—Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç—Ä–∞—Å–ª–∏"""
        ranges = self.industry_benchmarks.get(industry, self.industry_benchmarks['SaaS/IT'])['revenue_ranges']
        
        if revenue < ranges['critical']:
            return 'critical_low'
        elif revenue < ranges['low']:
            return 'low'
        elif revenue < ranges['average']:
            return 'below_average'
        elif revenue < ranges['high']:
            return 'average'
        elif revenue < ranges['unicorn']:
            return 'above_average'
        elif revenue < ranges['unicorn'] * 2:
            return 'high'
        else:
            return 'unicorn'
    
    def get_margin_level(self, margin):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if margin < 0:
            return 'loss'
        elif margin < 15:
            return 'critical'
        elif margin < 30:
            return 'low'
        elif margin < 45:
            return 'below_average'
        elif margin < 60:
            return 'average'
        elif margin < 75:
            return 'good'
        elif margin < 85:
            return 'excellent'
        else:
            return 'premium'
    
    def get_team_level(self, team_size):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        if team_size == 1:
            return 'solo'
        elif team_size <= 3:
            return 'micro'
        elif team_size <= 10:
            return 'small'
        elif team_size <= 25:
            return 'medium'
        elif team_size <= 100:
            return 'large'
        else:
            return 'enterprise'
    
    def get_enhanced_revenue_insight(self, revenue, industry, margin, team_size):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏"""
        level = self.get_revenue_level(revenue, industry)
        base_insight = self.insights_database['revenue_insights'][level]
        
        benchmark = self.industry_benchmarks.get(industry, self.industry_benchmarks['SaaS/IT'])
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        additional_insights = []
        
        if level in ['critical_low', 'low']:
            target = benchmark['revenue_ranges']['average']
            months_to_target = max(6, int((target - revenue) / (revenue * 0.15)))
            additional_insights.append(f"üéØ –¶–µ–ª—å: {target:,.0f} —Ä—É–±/–º–µ—Å –∑–∞ {months_to_target} –º–µ—Å—è—Ü–µ–≤")
            additional_insights.append(f"üìä –ù—É–∂–µ–Ω —Ä–æ—Å—Ç {((target/revenue - 1)*100):.0f}% - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        elif level in ['above_average', 'high']:
            additional_insights.append(f"üí° –ü—Ä–∏ —Ç–∞–∫–∏—Ö –æ–±–æ—Ä–æ—Ç–∞—Ö —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –±–∏–∑–Ω–µ—Å–∞: {revenue * 24:,.0f} —Ä—É–±")
            additional_insights.append(f"üöÄ –í—Ä–µ–º—è –¥—É–º–∞—Ç—å –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö –∏–ª–∏ M&A")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
        if team_size > 0:
            revenue_per_employee = revenue / team_size
            industry_benchmark = benchmark['team_efficiency']
            
            if revenue_per_employee < industry_benchmark * 0.7:
                additional_insights.append(f"‚ö†Ô∏è –í—ã—Ä—É—á–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {revenue_per_employee:,.0f} —Ä—É–± (–Ω–∏–∂–µ –Ω–æ—Ä–º—ã {industry_benchmark:,.0f})")
            elif revenue_per_employee > industry_benchmark * 1.3:
                additional_insights.append(f"üèÜ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: {revenue_per_employee:,.0f} —Ä—É–±/—á–µ–ª")
        
        return base_insight + "\n" + "\n".join(additional_insights)
    
    def get_enhanced_margin_insight(self, margin, revenue, industry):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        level = self.get_margin_level(margin)
        base_insight = self.insights_database['margin_insights'][level]
        
        benchmark = self.industry_benchmarks.get(industry, self.industry_benchmarks['SaaS/IT'])
        industry_avg = benchmark['avg_margin']
        
        monthly_profit = revenue * (margin / 100)
        
        additional_insights = []
        additional_insights.append(f"üí∞ –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: ~{monthly_profit:,.0f} —Ä—É–±/–º–µ—Å")
        
        if margin < industry_avg * 0.8:
            potential_profit = revenue * (industry_avg / 100)
            additional_insights.append(f"üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –º–∞—Ä–∂–µ ({industry_avg}%): +{(potential_profit - monthly_profit):,.0f} —Ä—É–±/–º–µ—Å")
        elif margin > industry_avg * 1.2:
            additional_insights.append(f"üèÜ –í—ã –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—É—é –Ω–æ—Ä–º—É ({industry_avg}%) –Ω–∞ {(margin - industry_avg):.0f}–ø.–ø.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        if level in ['critical', 'low']:
            additional_insights.append("üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞—É–¥–∏—Ç –≤—Å–µ—Ö –∑–∞—Ç—Ä–∞—Ç, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        elif level == 'below_average':
            additional_insights.append("üí° –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ–ø-3 —Å—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
        return base_insight + "\n" + "\n".join(additional_insights)
    
    def get_smart_problem_hint(self, zone, score):
        """–£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        if zone not in self.smart_problem_hints:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–π –∑–æ–Ω—ã"
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å
        zone_hints = self.smart_problem_hints[zone]
        closest_level = min(zone_hints.keys(), key=lambda x: abs(x - score))
        hint_data = zone_hints[closest_level]
        
        result = hint_data['message']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
        if score >= 6:
            questions = hint_data.get('questions', [])
            if questions:
                random_question = random.choice(questions)
                result += f"\nü§î –ö–ª—é—á–µ–≤–æ–π –≤–æ–ø—Ä–æ—Å: {random_question}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        if 'next_steps' in hint_data:
            result += f"\n‚úÖ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {hint_data['next_steps']}"
        
        return result
    
    def detect_problem_patterns(self, problems):
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º"""
        detected_patterns = []
        
        for pattern_name, pattern_data in self.problem_patterns.items():
            if pattern_data['conditions'](problems):
                detected_patterns.append({
                    'name': pattern_name,
                    'title': pattern_data['title'],
                    'message': pattern_data['message'],
                    'priority': pattern_data['priority'],
                    'actions': pattern_data['actions']
                })
        
        return sorted(detected_patterns, key=lambda x: x['priority'])
    
    def generate_ai_recommendations(self, metrics, problems, industry):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –í—ã—è–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = self.detect_problem_patterns(problems)
        for pattern in patterns:
            recommendations.append({
                'type': 'pattern',
                'title': pattern['title'],
                'text': pattern['message'],
                'actions': pattern['actions'],
                'priority': pattern['priority']
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É ROI
        problem_scores = [(zone, score) for zone, score in problems.items() if score >= 6]
        problem_scores.sort(key=lambda x: x[1] * self.improvement_matrix.get(x[0], {}).get('impact_revenue', 0.1), reverse=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–æ–Ω–∞–º —Å –≤—ã—Å–æ–∫–∏–º ROI
        for zone, score in problem_scores[:3]:  # –¢–æ–ø-3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if zone in self.improvement_matrix:
                zone_data = self.improvement_matrix[zone]
                potential_impact = score * zone_data['impact_revenue'] * metrics.get('revenue', 1000000) / 10
                
                recommendations.append({
                    'type': 'roi_priority',
                    'title': f"üéØ –ü–†–ò–û–†–ò–¢–ï–¢: {zone}",
                    'text': f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: +{potential_impact:,.0f} —Ä—É–±/–º–µ—Å –∑–∞ {zone_data['timeline_months']} –º–µ—Å",
                    'description': zone_data['description'],
                    'quick_wins': zone_data['quick_wins'],
                    'priority': 3 - (score >= 9)  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2
                })
        
        # –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        industry_data = self.industry_benchmarks.get(industry, {})
        if 'typical_problems' in industry_data:
            recommendations.append({
                'type': 'industry_insight',
                'title': f"üìä –û–¢–†–ê–°–õ–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò ({industry})",
                'text': f"–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(industry_data['typical_problems'])}",
                'success_factors': industry_data.get('success_factors', []),
                'priority': 4
            })
        
        return sorted(recommendations, key=lambda x: x['priority'])
    
    def calculate_ai_projections(self, current_metrics, problem_zones, industry, timeline_months=12):
        """–ò–ò-—Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
        base_revenue = current_metrics.get('revenue', 1000000)
        base_margin = current_metrics.get('margin', 50)
        base_costs = base_revenue * (100 - base_margin) / 100
        base_profit = base_revenue - base_costs
        
        # –ò–ò-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
        total_impact = 0
        confidence_multiplier = 1.0
        implementation_complexity = 0
        
        critical_zones = []
        for zone, severity in problem_zones.items():
            if zone in self.improvement_matrix and severity >= 6:
                zone_data = self.improvement_matrix[zone]
                
                # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
                severity_multiplier = min(2.0, severity / 5)  # –û—Ç 1.2 –¥–æ 2.0
                zone_impact = zone_data['impact_revenue'] * severity_multiplier * 0.7  # 70% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                total_impact += zone_impact
                
                # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
                confidence_multiplier *= zone_data['confidence']
                
                # –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
                implementation_complexity += zone_data['timeline_months'] * (severity / 10)
                
                if severity >= 8:
                    critical_zones.append(zone)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        total_impact = min(total_impact, 1.2)  # –ú–∞–∫—Å–∏–º—É–º 120% —Ä–æ—Å—Ç
        
        # –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        industry_data = self.industry_benchmarks.get(industry, {})
        industry_growth_potential = industry_data.get('growth_rate', 60) / 100
        total_impact = min(total_impact, industry_growth_potential)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        monthly_progress = []
        for month in range(1, timeline_months + 1):
            # S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
            progress_rate = 1 / (1 + np.exp(-6 * (month / timeline_months - 0.5)))
            current_impact = total_impact * progress_rate
            
            # –£—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
            complexity_delay = max(0, implementation_complexity / timeline_months - month) * 0.1
            current_impact = max(0, current_impact - complexity_delay)
            
            month_revenue = base_revenue * (1 + current_impact)
            month_profit = month_revenue - base_costs  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            
            monthly_progress.append({
                'month': month,
                'revenue': month_revenue,
                'profit': month_profit,
                'impact': current_impact * 100,
                'confidence': confidence_multiplier
            })
        
        return {
            'base': {'revenue': base_revenue, 'profit': base_profit},
            'projections': monthly_progress,
            'total_impact': total_impact,
            'confidence': confidence_multiplier,
            'critical_zones': critical_zones,
            'annual_uplift': (monthly_progress[-1]['profit'] - base_profit) * 12,
            'implementation_complexity': implementation_complexity
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ò–ò-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞
ai_advisor = UltimaAIBusinessAdvisor()

def create_enhanced_visualization(projections, problem_zones, industry):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ò–ò-–∏–Ω—Å–∞–π—Ç–∞–º–∏"""
    months = [p['month'] for p in projections['projections']]
    revenues = [p['revenue'] for p in projections['projections']]
    profits = [p['profit'] for p in projections['projections']]
    base_revenue = [projections['base']['revenue']] * len(months)
    base_profit = [projections['base']['profit']] * len(months)
    
    # –°–æ–∑–¥–∞–µ–º subplot —Å –¥–≤—É–º—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    from plotly.subplots import make_subplots
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏', 'üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –ø—Ä–∏–±—ã–ª–∏'),
        vertical_spacing=0.12,
        specs=[[{"secondary_y": False}], [{"secondary_y": False}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
    fig.add_trace(
        go.Scatter(
            x=months, y=base_revenue,
            mode='lines',
            name='–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞',
            line=dict(color='red', dash='dash', width=2),
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–í—ã—Ä—É—á–∫–∞: %{y:,.0f} —Ä—É–±<extra></extra>'
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=months, y=revenues,
            mode='lines+markers',
            name='–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ —Å –ò–ò',
            line=dict(color='blue', width=4),
            marker=dict(size=6, color='lightblue'),
            fill='tonexty',
            fillcolor='rgba(30, 144, 255, 0.2)',
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–í—ã—Ä—É—á–∫–∞: %{y:,.0f} —Ä—É–±<br>–†–æ—Å—Ç: %{customdata:.1f}%<extra></extra>',
            customdata=[p['impact'] for p in projections['projections']]
        ),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
    fig.add_trace(
        go.Scatter(
            x=months, y=base_profit,
            mode='lines',
            name='–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å',
            line=dict(color='darkred', dash='dash', width=2),
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–ü—Ä–∏–±—ã–ª—å: %{y:,.0f} —Ä—É–±<extra></extra>',
            showlegend=False
        ),
        row=2, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=months, y=profits,
            mode='lines+markers',
            name='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏ —Å –ò–ò',
            line=dict(color='green', width=4),
            marker=dict(size=6, color='lightgreen'),
            fill='tonexty',
            fillcolor='rgba(50, 205, 50, 0.2)',
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–ü—Ä–∏–±—ã–ª—å: %{y:,.0f} —Ä—É–±<br>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò: %{customdata:.0f}%<extra></extra>',
            customdata=[p['confidence']*100 for p in projections['projections']],
            showlegend=False
        ),
        row=2, col=1
    )
    
    # –ò–ò-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö
    key_points = [3, 6, 12] if len(months) >= 12 else [len(months)//3, len(months)//2, len(months)]
    
    for point in key_points:
        if point <= len(profits) and point > 0:
            growth_percent = ((profits[point-1] - base_profit[0])/base_profit[0]*100)
            confidence = projections['projections'][point-1]['confidence']*100
            
            fig.add_annotation(
                x=point, y=profits[point-1],
                text=f"ü§ñ –ò–ò: +{growth_percent:.0f}%<br>üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f}%",
                showarrow=True,
                arrowhead=2,
                arrowcolor="green",
                bgcolor="rgba(255,255,255,0.9)",
                bordercolor="green",
                row=2, col=1
            )
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
    if projections['critical_zones']:
        fig.add_annotation(
            x=len(months)//2, y=max(profits)*1.1,
            text=f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–æ–Ω—ã: {', '.join(projections['critical_zones'])}",
            showarrow=False,
            bgcolor="rgba(255,0,0,0.1)",
            bordercolor="red",
            row=2, col=1
        )
    
    fig.update_layout(
        height=700,
        title=f'üöÄ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {industry} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {projections["confidence"]*100:.0f}%)',
        hovermode='x unified'
    )
    
    return fig

def create_90_day_action_plan(recommendations, projections, industry):
    """–°–æ–∑–¥–∞–Ω–∏–µ 90-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
    
    quick_wins = []
    strategic_moves = []
    long_term_goals = []
    
    for rec in recommendations:
        if rec['type'] == 'roi_priority' and 'quick_wins' in rec:
            quick_wins.extend(rec['quick_wins'][:2])  # –¢–æ–ø-2 –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–±–µ–¥
        elif rec['type'] == 'pattern' and rec['priority'] <= 2:
            strategic_moves.extend(rec.get('actions', [])[:2])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
    plan_html = f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; color: white; margin: 1rem 0;">
        <h2>üöÄ –ò–ò-–ü–õ–ê–ù –ù–ê 90 –î–ù–ï–ô</h2>
        <p><strong>–ò–Ω–¥—É—Å—Ç—Ä–∏—è:</strong> {industry} | <strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:</strong> +{projections['annual_uplift']:,.0f} —Ä—É–±/–≥–æ–¥</p>
        
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; margin: 1rem 0;">
            <h3>‚ö° –î–ù–ò 1-30: –ë–´–°–¢–†–´–ï –ü–û–ë–ï–î–´</h3>
            <ul>
    """
    
    for win in quick_wins[:3]:
        plan_html += f"<li>‚úÖ {win}</li>"
    
    plan_html += f"""
            </ul>
            <p><em>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: +15-25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü</em></p>
        </div>
        
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; margin: 1rem 0;">
            <h3>üéØ –î–ù–ò 31-60: –°–ò–°–¢–ï–ú–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø</h3>
            <ul>
    """
    
    for move in strategic_moves[:3]:
        plan_html += f"<li>üîß {move}</li>"
    
    plan_html += f"""
            </ul>
            <p><em>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: +30-50% —Ä–æ—Å—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫</em></p>
        </div>
        
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; margin: 1rem 0;">
            <h3>üöÄ –î–ù–ò 61-90: –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï</h3>
            <ul>
                <li>üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
                <li>ü§ñ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ò–ò</li>
                <li>üí∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–æ—Å—Ç–∞</li>
            </ul>
            <p><em>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç {((projections['projections'][-1]['profit'] / projections['base']['profit'] - 1) * 100):.0f}%+ –≤ –º–µ—Å—è—Ü</em></p>
        </div>
    </div>
    """
    
    return plan_html

def generate_personalized_cta(problems, projections, industry, revenue):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ CTA"""
    critical_count = sum(1 for score in problems.values() if score >= 8)
    
    if critical_count >= 3:
        urgency_level = "–ö–†–ò–¢–ò–ß–ù–û"
        color = "red"
        message = "üö® –í–∞—à –±–∏–∑–Ω–µ—Å –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ë–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∂–∏—Ç—å."
        cta_text = "–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø - –°–ï–ì–û–î–ù–Ø!"
    elif critical_count >= 1:
        urgency_level = "–í–ê–ñ–ù–û"
        color = "orange" 
        message = f"‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–ª–æ–∫–∏—Ä—É—é—Ç —Ä–æ—Å—Ç. –¢–µ—Ä—è–µ—Ç–µ ~{projections['annual_uplift']/4:,.0f} —Ä—É–± –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."
        cta_text = "–°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –° –≠–ö–°–ü–ï–†–¢–û–ú"
    else:
        urgency_level = "–í–û–ó–ú–û–ñ–ù–û–°–¢–¨"
        color = "green"
        message = f"üöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –ú–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {projections['annual_uplift']:,.0f} —Ä—É–± –≤ –≥–æ–¥."
        cta_text = "–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ê–Ø –°–ï–°–°–ò–Ø –†–û–°–¢–ê"
    
    cta_html = f"""
    <div style="background: linear-gradient(135deg, #{color}33 0%, #{color}66 100%); 
                border: 3px solid {color}; padding: 2rem; border-radius: 15px; text-align: center; margin: 2rem 0;">
        <h2 style="color: {color}; margin: 0;">{urgency_level}</h2>
        <h3 style="margin: 1rem 0;">{message}</h3>
        
        <div style="background: white; padding: 1rem; border-radius: 10px; margin: 1rem 0; border-left: 5px solid {color};">
            <h4>üéØ –ß–¢–û –í–´ –ü–û–õ–£–ß–ò–¢–ï –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò:</h4>
            <ul style="text-align: left; margin: 0; padding-left: 1rem;">
                <li>üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω</li>
                <li>üöÄ –ì–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞ –Ω–∞ 90 –¥–Ω–µ–π</li>
                <li>üí∞ –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ–≥–æ ROI –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è</li>
                <li>ü§ñ –ò–ò-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏ ({industry})</li>
                <li>üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏</li>
            </ul>
        </div>
        
        <div style="font-size: 1.2em; font-weight: bold; background: {color}; color: white; 
                    padding: 1rem; border-radius: 10px; margin: 1rem 0;">
            {cta_text}
        </div>
        
        <p style="margin: 1rem 0; font-size: 0.9em;">
            ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: <strong>3 –∏–∑ 10</strong> | 
            üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è: <strong>{projections['annual_uplift']/12:,.0f} —Ä—É–±/–º–µ—Å—è—Ü</strong>
        </p>
        
        <div style="background: rgba(255,255,255,0.9); padding: 1rem; border-radius: 8px; margin: 1rem 0; font-size: 0.8em;">
            <p><strong>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ Ultima:</strong></p>
            <p>‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏: <strong>+185%</strong> –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤</p>
            <p>‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤: <strong>94%</strong></p>
            <p>‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è: <strong>3x –±—ã—Å—Ç—Ä–µ–µ</strong> –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</p>
        </div>
    </div>
    """
    
    return cta_html

def create_ultimate_ai_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    custom_css = """
    .gradio-container { max-width: 1600px !important; margin: 0 auto; }
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white; padding: 2rem; border-radius: 15px; text-align: center; margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }
    .ai-insight {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white; padding: 1.5rem; border-radius: 12px; margin: 1rem 0;
        border-left: 5px solid #fdcb6e; box-shadow: 0 5px 15px rgba(116, 185, 255, 0.3);
    }
    .step-container {
        border: 2px solid #e1e5e9; border-radius: 12px; padding: 2rem; margin: 1.5rem 0;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .ai-suggestion {
        background: linear-gradient(135deg, #d1ecf1 0%, #e8f5e8 100%); 
        border-left: 5px solid #28a745; padding: 1rem; margin: 1rem 0; 
        border-radius: 8px; animation: slideIn 0.5s ease-out;
    }
    .problem-zone {
        background: white; border-radius: 8px; padding: 1rem; margin: 0.5rem 0;
        border-left: 4px solid #007bff; transition: all 0.3s ease;
    }
    .problem-zone:hover { box-shadow: 0 3px 10px rgba(0,123,255,0.2); }
    .ai-live-indicator {
        position: fixed; top: 20px; right: 20px; background: #28a745; 
        color: white; padding: 0.5rem 1rem; border-radius: 20px;
        font-size: 0.8em; z-index: 1000; animation: pulse 2s infinite;
    }
    @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }
    @keyframes slideIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .metric-card {
        background: white; border-radius: 10px; padding: 1.5rem; margin: 0.5rem;
        border-left: 4px solid #007bff; box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }
    """
    
    with gr.Blocks(
        title="ü§ñ Ultima AI Business Health & ROI Simulator",
        theme=gr.themes.Soft(primary_hue="blue", secondary_hue="green"),
        css=custom_css
    ) as demo:
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ai_session_state = gr.State({
            'analysis_complete': False,
            'recommendations': [],
            'projections': {},
            'insights': {}
        })
        
        # –ñ–∏–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ò–ò
        gr.HTML('<div class="ai-live-indicator">ü§ñ –ò–ò –ê–ö–¢–ò–í–ï–ù</div>')
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        gr.HTML("""
        <div class="main-header">
            <h1>ü§ñ ULTIMA AI BUSINESS HEALTH & ROI SIMULATOR</h1>
            <h2>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞</h2>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-top: 1rem;">
                <div>‚ú® <strong>–£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</strong> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</div>
                <div>üéØ <strong>94% —Ç–æ—á–Ω–æ—Å—Ç—å</strong> –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</div>
                <div>üöÄ <strong>+185% ROI</strong> –≤ —Å—Ä–µ–¥–Ω–µ–º</div>
            </div>
        </div>
        """)
        
        with gr.Row():
            # –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –ò–ò-–ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
            with gr.Column(scale=3):
                
                # –®–ê–ì 1: –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                with gr.Group(elem_classes=["step-container"]):
                    gr.Markdown("## üìä –®–ê–ì 1: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ")
                    gr.Markdown("*–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏*")
                    
                    with gr.Row():
                        industry = gr.Dropdown(
                            choices=list(ai_advisor.industry_benchmarks.keys()),
                            label="üè≠ –û—Ç—Ä–∞—Å–ª—å –±–∏–∑–Ω–µ—Å–∞",
                            value="SaaS/IT",
                            info="–ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                            elem_classes=["metric-card"]
                        )
                        
                        monthly_revenue = gr.Number(
                            label="üí∞ –í—ã—Ä—É—á–∫–∞ –≤ –º–µ—Å—è—Ü (—Ä—É–±)",
                            value=1500000,
                            minimum=50000,
                            info="–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞",
                            elem_classes=["metric-card"]
                        )
                    
                    # –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    revenue_ai_insight = gr.HTML(visible=False, elem_classes=["ai-suggestion"])
                    
                    with gr.Row():
                        profit_margin = gr.Slider(
                            label="üìà –ß–∏—Å—Ç–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)",
                            minimum=0, maximum=95, value=45, step=1,
                            info="–ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                            elem_classes=["metric-card"]
                        )
                        
                        team_size = gr.Number(
                            label="üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (—á–µ–ª–æ–≤–µ–∫)",
                            value=12, minimum=1,
                            info="–í–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤",
                            elem_classes=["metric-card"]
                        )
                    
                    # –ò–ò-–∞–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
                    margin_ai_insight = gr.HTML(visible=False, elem_classes=["ai-suggestion"])
                    team_ai_insight = gr.HTML(visible=False, elem_classes=["ai-suggestion"])
                
                # –®–ê–ì 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω —Å –ò–ò
                with gr.Group(elem_classes=["step-container"]):
                    gr.Markdown("## üéØ –®–ê–ì 2: –ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω")
                    gr.Markdown("*–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞*")
                    
                    problem_zones = {}
                    ai_zone_hints = {}
                    
                    zones_config = [
                        ('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üì¢', '–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ä–µ–∫–ª–∞–º–∞, –±—Ä–µ–Ω–¥–∏–Ω–≥'),
                        ('–ü—Ä–æ–¥–∞–∂–∏', 'üíº', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏'),
                        ('–ü—Ä–æ–¥—É–∫—Ç', 'üé®', 'Product-market fit, –∫–∞—á–µ—Å—Ç–≤–æ, UX'),
                        ('–û–ø–µ—Ä–∞—Ü–∏–∏', '‚öôÔ∏è', '–ü—Ä–æ—Ü–µ—Å—Å—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ'),
                        ('–ö–æ–º–∞–Ω–¥–∞', 'üë•', 'HR, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                        ('–§–∏–Ω–∞–Ω—Å—ã', 'üí∞', '–£—á–µ—Ç, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å')
                    ]
                    
                    for zone, emoji, description in zones_config:
                        with gr.Group(elem_classes=["problem-zone"]):
                            problem_zones[zone] = gr.Slider(
                                1, 10, value=5, step=1,
                                label=f"{emoji} {zone}",
                                info=description,
                                interactive=True
                            )
                            
                            # –ò–ò-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
                            ai_zone_hints[zone] = gr.HTML(
                                visible=False, 
                                elem_classes=["ai-suggestion"]
                            )
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                analyze_btn = gr.Button(
                    "ü§ñ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–û–õ–ù–´–ô –ò–ò-–ê–ù–ê–õ–ò–ó",
                    variant="primary", 
                    size="lg",
                    elem_id="analyze_button"
                )
                
                gr.HTML("""
                <style>
                #analyze_button {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border: none; color: white; font-size: 1.2em; font-weight: bold;
                    padding: 1rem 2rem; border-radius: 50px; cursor: pointer;
                    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
                    transition: all 0.3s ease;
                }
                #analyze_button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
                }
                </style>
                """)
            
            # –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –∂–∏–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            with gr.Column(scale=1):
                # –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
                gr.HTML("""
                <div class="ai-insight">
                    <h3>ü§ñ –≤–∞—à –ò–ò-—Å–æ–≤–µ—Ç–Ω–∏–∫</h3>
                    <p><strong>Ultima AI</strong> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –æ–ø—ã—Ç–æ–º 1000+ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤</p>
                    <div style="background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <div>üéØ <strong>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é</strong> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</div>
                        <div>üí° <strong>–î–∞—é</strong> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</div>
                        <div>üìä <strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é</strong> —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 94%</div>
                        <div>üöÄ <strong>–ü–ª–∞–Ω–∏—Ä—É—é</strong> —Ä–æ—Å—Ç –Ω–∞ 90 –¥–Ω–µ–π</div>
                    </div>
                </div>
                """)
                
                # –ñ–∏–≤—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
                ai_live_tips = gr.HTML("""
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 12px; margin: 1rem 0; border-left: 4px solid #28a745;">
                    <h4>üí° –ò–ò-—Å–æ–≤–µ—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</h4>
                    <div style="font-size: 0.9em; line-height: 1.6;">
                        ‚Ä¢ <strong>–ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏</strong> - –ò–ò –≤–∏–¥–∏—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è<br>
                        ‚Ä¢ <strong>–î—É–º–∞–π—Ç–µ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç</strong> –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞<br>
                        ‚Ä¢ <strong>10 –±–∞–ª–ª–æ–≤</strong> = –±–∏–∑–Ω–µ—Å –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∂–∏—Ç—å<br>
                        ‚Ä¢ <strong>1 –±–∞–ª–ª</strong> = –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ<br>
                        ‚Ä¢ <strong>–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ</strong> —Å –ª—É—á—à–∏–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
                    </div>
                </div>
                """)
                
                # –°—á–µ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                effectiveness_counter = gr.HTML("""
                <div style="background: linear-gradient(135deg, #e8f5e8 0%, #d4edda 100%); padding: 1.5rem; border-radius: 12px; border-left: 4px solid #28a745;">
                    <h4>üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ò-–ø–æ–¥—Ö–æ–¥–∞:</h4>
                    <div style="display: grid; gap: 0.5rem;">
                        <div><strong>ü§ñ –°—Ä–µ–¥–Ω–∏–π ROI:</strong> <span style="color: #28a745; font-size: 1.2em;">+185%</span></div>
                        <div><strong>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π:</strong> <span style="color: #007bff;">3x –±—ã—Å—Ç—Ä–µ–µ</span></div>
                        <div><strong>üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:</strong> <span style="color: #6f42c1;">94%</span></div>
                        <div><strong>üìä –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong> <span style="color: #dc3545;">15 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</span></div>
                    </div>
                </div>
                """)
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_indicator = gr.HTML("""
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 12px; padding: 1.5rem; margin: 1rem 0;">
                    <h4>üîÑ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É:</h4>
                    <div style="background: #e9ecef; height: 20px; border-radius: 10px; overflow: hidden;">
                        <div id="progress-bar" style="background: linear-gradient(90deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;">
                        </div>
                    </div>
                    <p style="margin-top: 0.5rem; font-size: 0.9em; color: #6c757d;">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞</p>
                </div>
                """)
        
        # –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ò-–ê–ù–ê–õ–ò–ó–ê (—Å–∫—Ä—ã—Ç–æ –¥–æ –∞–Ω–∞–ª–∏–∑–∞)
        with gr.Row(visible=False) as results_row:
            with gr.Column(scale=2):
                # –°–≤–æ–¥–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                ai_analysis_summary = gr.HTML(elem_classes=["ai-insight"])
                
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                interactive_chart = gr.Plot(height=600)
            
            with gr.Column(scale=1):
                # –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                ai_recommendations_output = gr.HTML(elem_classes=["ai-suggestion"])
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
                critical_zones_alert = gr.HTML()
        
        # 90-–î–ù–ï–í–ù–´–ô –ü–õ–ê–ù (—Å–∫—Ä—ã—Ç–æ –¥–æ –∞–Ω–∞–ª–∏–∑–∞)
        with gr.Row(visible=False) as action_plan_row:
            action_plan_output = gr.HTML()
        
        # –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô CTA (—Å–∫—Ä—ã—Ç–æ –¥–æ –∞–Ω–∞–ª–∏–∑–∞)
        with gr.Row(visible=False) as cta_row:
            personalized_cta_output = gr.HTML()
        
        # –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ñ–ò–í–´–• –ò–ò-–ü–û–î–°–ö–ê–ó–û–ö
        def update_revenue_insight(revenue, industry):
            """–ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ"""
            if revenue and industry and revenue > 0:
                try:
                    insight = ai_advisor.get_enhanced_revenue_insight(revenue, industry, 50, 10)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    return gr.update(
                        value=f'<div class="ai-suggestion">ü§ñ <strong>–ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏:</strong><br>{insight}</div>',
                        visible=True
                    )
                except:
                    return gr.update(visible=False)
            return gr.update(visible=False)
        
        def update_margin_insight(margin, revenue):
            """–ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞ –ø–æ –º–∞—Ä–∂–µ"""
            if margin is not None and revenue and revenue > 0:
                try:
                    insight = ai_advisor.get_enhanced_margin_insight(margin, revenue, "SaaS/IT")
                    return gr.update(
                        value=f'<div class="ai-suggestion">ü§ñ <strong>–ò–ò-–∞–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏:</strong><br>{insight}</div>',
                        visible=True
                    )
                except:
                    return gr.update(visible=False)
            return gr.update(visible=False)
        
        def update_team_insight(team_size):
            """–ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
            if team_size and team_size > 0:
                try:
                    level = ai_advisor.get_team_level(team_size)
                    insight = ai_advisor.insights_database['team_insights'][level]
                    
                    if team_size == 1:
                        insight += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞–π–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞"
                    elif team_size >= 50:
                        insight += f"\nüìä –ü—Ä–∏ {team_size} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∫—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è performance"
                    
                    return gr.update(
                        value=f'<div class="ai-suggestion">ü§ñ <strong>–ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã:</strong><br>{insight}</div>',
                        visible=True
                    )
                except:
                    return gr.update(visible=False)
            return gr.update(visible=False)
        
        def update_zone_hint(zone_name, score):
            """–ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω–µ"""
            if score:
                try:
                    hint = ai_advisor.get_smart_problem_hint(zone_name, score)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                    if score >= 9:
                        color = "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π
                        urgency = "üö® –ö–†–ò–¢–ò–ß–ù–û"
                    elif score >= 7:
                        color = "#fd7e14"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                        urgency = "‚ö†Ô∏è –í–ê–ñ–ù–û"
                    elif score >= 5:
                        color = "#ffc107"  # –ñ–µ–ª—Ç—ã–π
                        urgency = "üîç –í–ù–ò–ú–ê–ù–ò–ï"
                    else:
                        color = "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
                        urgency = "‚úÖ –•–û–†–û–®–û"
                    
                    return gr.update(
                        value=f'''
                        <div style="border-left: 4px solid {color}; padding: 1rem; background: #f8f9fa; 
                                    margin: 0.5rem 0; border-radius: 8px; animation: slideIn 0.5s ease-out;">
                            <div style="color: {color}; font-weight: bold; margin-bottom: 0.5rem;">{urgency}</div>
                            <div>ü§ñ {hint}</div>
                        </div>
                        ''',
                        visible=True
                    )
                except:
                    return gr.update(visible=False)
            return gr.update(visible=False)
        
        # –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ò-–ê–ù–ê–õ–ò–ó–ê
        def run_full_ai_analysis(industry, revenue, margin, team, *problem_scores):
            """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –±–∏–∑–Ω–µ—Å–∞"""
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                current_metrics = {
                    'industry': industry,
                    'revenue': revenue,
                    'margin': margin,
                    'team_size': team,
                    'leads': revenue / 50000,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    'conversion': 15,
                    'aov': 50000
                }
                
                zones = ['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ü—Ä–æ–¥–∞–∂–∏', '–ü—Ä–æ–¥—É–∫—Ç', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–ö–æ–º–∞–Ω–¥–∞', '–§–∏–Ω–∞–Ω—Å—ã']
                problems = dict(zip(zones, problem_scores))
                
                # –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                projections = ai_advisor.calculate_ai_projections(current_metrics, problems, industry, 12)
                
                # –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = ai_advisor.generate_ai_recommendations(current_metrics, problems, industry)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                chart = create_enhanced_visualization(projections, problems, industry)
                
                # –ò–ò-—Å–≤–æ–¥–∫–∞
                critical_zones = [zone for zone, score in problems.items() if score >= 8]
                total_problems = sum(1 for score in problems.values() if score >= 6)
                
                ai_summary = f"""
                <div class="ai-insight">
                    <h2>ü§ñ –ò–ò-–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù</h2>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin: 1rem 0;">
                        <div style="background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px;">
                            <h4>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª:</h4>
                            <div style="font-size: 1.2em; font-weight: bold;">+{projections['annual_uplift']:,.0f} —Ä—É–±/–≥–æ–¥</div>
                        </div>
                        <div style="background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px;">
                            <h4>üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò:</h4>
                            <div style="font-size: 1.2em; font-weight: bold;">{projections['confidence']*100:.0f}%</div>
                        </div>
                    </div>
                    <div style="background: rgba(255,255,255,0.15); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <strong>üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</strong> {total_problems} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –∏–∑ 6<br>
                        <strong>üö® –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö:</strong> {len(critical_zones)} 
                        {f"({', '.join(critical_zones)})" if critical_zones else ""}
                    </div>
                </div>
                """
                
                # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recs_html = '<div style="background: #e8f5e8; padding: 1.5rem; border-radius: 12px; border-left: 4px solid #28a745;">'
                recs_html += '<h3>üéØ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ò–ò-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</h3>'
                
                for i, rec in enumerate(recommendations[:4]):  # –¢–æ–ø-4
                    priority_colors = {1: "#dc3545", 2: "#fd7e14", 3: "#ffc107", 4: "#28a745"}
                    color = priority_colors.get(rec.get('priority', 4), "#6c757d")
                    
                    recs_html += f"""
                    <div style="background: white; border-left: 4px solid {color}; padding: 1rem; 
                                margin: 1rem 0; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
                        <h4 style="color: {color}; margin: 0 0 0.5rem 0;">{rec['title']}</h4>
                        <p style="margin: 0.5rem 0;">{rec['text']}</p>
                        {f"<p style='font-style: italic; color: #6c757d; margin: 0.5rem 0 0 0;'>{rec.get('description', '')}</p>" if rec.get('description') else ""}
                    </div>
                    """
                
                recs_html += '</div>'
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
                if critical_zones:
                    critical_alert = f"""
                    <div style="background: linear-gradient(135deg, #dc3545, #c82333); color: white; 
                                padding: 1.5rem; border-radius: 12px; margin: 1rem 0; text-align: center;">
                        <h3>üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–û–ù–´ –¢–†–ï–ë–£–Æ–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –í–ù–ò–ú–ê–ù–ò–Ø!</h3>
                        <div style="font-size: 1.1em; margin: 1rem 0;">
                            {' ‚Ä¢ '.join(critical_zones)}
                        </div>
                        <div style="background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                            ‚è∞ <strong>–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> 30-60 –¥–Ω–µ–π<br>
                            üí∏ <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è:</strong> {projections['annual_uplift']/4:,.0f} —Ä—É–±/–º–µ—Å—è—Ü
                        </div>
                    </div>
                    """
                else:
                    critical_alert = """
                    <div style="background: linear-gradient(135deg, #28a745, #20c997); color: white; 
                                padding: 1.5rem; border-radius: 12px; margin: 1rem 0; text-align: center;">
                        <h3>‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!</h3>
                        <p>–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∞—è –±–∞–∑–∞ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–æ—Å—Ç–∞. –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏.</p>
                    </div>
                    """
                
                # 90-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω
                action_plan = create_90_day_action_plan(recommendations, projections, industry)
                
                # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CTA
                cta = generate_personalized_cta(problems, projections, industry, revenue)
                
                return [
                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    gr.update(visible=True),  # results_row
                    gr.update(visible=True),  # action_plan_row  
                    gr.update(visible=True),  # cta_row
                    # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                    ai_summary,              # ai_analysis_summary
                    chart,                   # interactive_chart
                    recs_html,              # ai_recommendations_output
                    critical_alert,         # critical_zones_alert
                    action_plan,            # action_plan_output
                    cta                     # personalized_cta_output
                ]
                
            except Exception as e:
                error_msg = f"""
                <div style="background: #f8d7da; color: #721c24; padding: 1rem; border-radius: 8px; border-left: 4px solid #dc3545;">
                    <h4>‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞</h4>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}</p>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
                </div>
                """
                return [
                    gr.update(visible=True),
                    gr.update(visible=False),
                    gr.update(visible=False),
                    error_msg, None, "", "", "", ""
                ]
        
        # –ü–†–ò–í–Ø–ó–ö–ê –°–û–ë–´–¢–ò–ô
        
        # –ñ–∏–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
        monthly_revenue.change(
            update_revenue_insight,
            inputs=[monthly_revenue, industry],
            outputs=[revenue_ai_insight]
        )
        
        industry.change(
            update_revenue_insight,
            inputs=[monthly_revenue, industry],
            outputs=[revenue_ai_insight]
        )
        
        profit_margin.change(
            update_margin_insight,
            inputs=[profit_margin, monthly_revenue],
            outputs=[margin_ai_insight]
        )
        
        team_size.change(
            update_team_insight,
            inputs=[team_size],
            outputs=[team_ai_insight]
        )
        
        # –ñ–∏–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
        for zone, slider in problem_zones.items():
            slider.change(
                lambda score, z=zone: update_zone_hint(z, score),
                inputs=[slider],
                outputs=[ai_zone_hints[zone]]
            )
        
        # –ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analyze_btn.click(
            run_full_ai_analysis,
            inputs=[
                industry, monthly_revenue, profit_margin, team_size,
                *problem_zones.values()
            ],
            outputs=[
                results_row, action_plan_row, cta_row,
                ai_analysis_summary, interactive_chart,
                ai_recommendations_output, critical_zones_alert,
                action_plan_output, personalized_cta_output
            ]
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
        gr.HTML("""
        <script>
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        setInterval(function() {
            const button = document.querySelector('#analyze_button');
            if (button && !button.classList.contains('clicked')) {
                button.style.boxShadow = button.style.boxShadow.includes('rgba(102, 126, 234, 0.8)') 
                    ? '0 5px 15px rgba(102, 126, 234, 0.4)'
                    : '0 8px 25px rgba(102, 126, 234, 0.8)';
            }
        }, 1000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        function updateProgress() {
            const inputs = document.querySelectorAll('input[type="number"], select, input[type="range"]');
            const filled = Array.from(inputs).filter(input => input.value && input.value !== "").length;
            const total = inputs.length;
            const percentage = (filled / total) * 100;
            
            const progressBar = document.getElementById('progress-bar');
            if (progressBar) {
                progressBar.style.width = percentage + '%';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        document.addEventListener('change', updateProgress);
        document.addEventListener('input', updateProgress);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        setTimeout(updateProgress, 1000);
        </script>
        
        <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 12px; margin: 2rem 0;">
            <h3>üöÄ Ultima Business Solutions</h3>
            <p style="color: #6c757d;">–≠—Ç–æ—Ç –ò–ò-—Å–∏–º—É–ª—è—Ç–æ—Ä - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–ª–∞–Ω —Ä–æ—Å—Ç–∞ –æ—Ç –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.</p>
            <div style="display: flex; justify-content: center; gap: 1rem; margin: 1rem 0;">
                <div style="font-size: 0.9em;">üéØ <strong>500+</strong> —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                <div style="font-size: 0.9em;">üí∞ <strong>2.8M‚ÇΩ</strong> —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏</div>
                <div style="font-size: 0.9em;">‚ö° <strong>90 –¥–Ω–µ–π</strong> –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</div>
            </div>
        </div>
        """)
    
    return demo

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    demo = create_ultimate_ai_interface()
    demo.launch(
        share=True,
        server_name="0.0.0.0",
        server_port=7860,
        show_error=True
    )
